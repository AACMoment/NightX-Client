package net.aspw.nightx.features.module.modules.exploit

import net.aspw.nightx.NightX
import net.aspw.nightx.event.*
import net.aspw.nightx.features.module.Module
import net.aspw.nightx.features.module.ModuleCategory
import net.aspw.nightx.features.module.ModuleInfo
import net.aspw.nightx.features.module.modules.movement.Speed
import net.aspw.nightx.utils.MovementUtils
import net.aspw.nightx.utils.PacketUtils
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import org.lwjgl.input.Keyboard
import java.util.*
import kotlin.math.round
import kotlin.math.sqrt

@ModuleInfo(name = "DesyncFlight", spacedName = "Desync Flight", category = ModuleCategory.EXPLOIT)
class DesyncFlight : Module() {

    private val packetQueue = LinkedList<C0FPacketConfirmTransaction>()

    fun isInventory(action: Short): Boolean = action > 0 && action < 100

    override fun onEnable() {
        packetQueue.clear()
    }

    override fun onDisable() {
        packetQueue.clear()

        val speed = NightX.moduleManager.getModule(Speed::class.java)

        if (speed != null) {
            if (!speed.state) {
                MovementUtils.strafe(0.2f)
            }
        }

        mc.thePlayer?.noClip = false
    }

    @EventTarget
    fun onWorld(event: WorldEvent) {
        packetQueue.clear()
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if (packet is C03PacketPlayer) {
            val yPos = round(mc.thePlayer.posY / 0.015625) * 0.015625
            mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ)

            if (mc.thePlayer.ticksExisted % 45 == 0) {
                PacketUtils.sendPacketNoEvent(
                    C04PacketPlayerPosition(
                        mc.thePlayer.posX,
                        mc.thePlayer.posY,
                        mc.thePlayer.posZ,
                        true
                    )
                )
                PacketUtils.sendPacketNoEvent(
                    C04PacketPlayerPosition(
                        mc.thePlayer.posX,
                        mc.thePlayer.posY - 11.725,
                        mc.thePlayer.posZ,
                        false
                    )
                )
                PacketUtils.sendPacketNoEvent(
                    C04PacketPlayerPosition(
                        mc.thePlayer.posX,
                        mc.thePlayer.posY,
                        mc.thePlayer.posZ,
                        true
                    )
                )
            }
        }

        if (packet is S08PacketPlayerPosLook) {
            if (mc.thePlayer == null || mc.thePlayer.ticksExisted <= 0) return

            var x = packet.getX() - mc.thePlayer.posX
            var y = packet.getY() - mc.thePlayer.posY
            var z = packet.getZ() - mc.thePlayer.posZ
            var diff = sqrt(x * x + y * y + z * z)
            if (diff <= 8) {
                event.cancelEvent()
                PacketUtils.sendPacketNoEvent(
                    C06PacketPlayerPosLook(
                        packet.getX(),
                        packet.getY(),
                        packet.getZ(),
                        packet.getYaw(),
                        packet.getPitch(),
                        true
                    )
                )
            }
        }

        if (packet is C0FPacketConfirmTransaction && !isInventory(packet.uid)) {
            repeat(4) {
                packetQueue.add(packet)
            }
            event.cancelEvent()
        }
    }

    @EventTarget(priority = 2)
    fun onMotion(event: MotionEvent) {
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        mc.thePlayer.noClip = true
        mc.thePlayer.fallDistance = 0f
        mc.thePlayer.onGround = false

        mc.thePlayer.capabilities.isFlying = false
        mc.thePlayer.motionX = 0.0
        mc.thePlayer.motionY = 0.0
        mc.thePlayer.motionZ = 0.0

        MovementUtils.strafe(1f)
        if (mc.gameSettings.keyBindJump.isKeyDown) {
            mc.thePlayer.motionY += 0.6f
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT)) {
            mc.thePlayer.motionY -= 0.6f
            mc.gameSettings.keyBindSneak.pressed = false
        }

        if (mc.thePlayer.ticksExisted % 180 == 0) {
            while (packetQueue.size > 22) {
                PacketUtils.sendPacketNoEvent(packetQueue.poll())
            }
        }
    }
}